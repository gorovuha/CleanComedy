{"@type": "sc:Dataset", "name": "CleanComedy", "citeAs": "CleanComedy", "description": "CleanComedy, a specialised, partially annotated corpus, which includes jokes in English and Russian languages. The dataset is a filtered collection of existing sources, where toxic jokes and duplicates are removed with various algorithmic filters.", "license": "cc-by-4.0", "url": "https://anonymous.4open.science/r/CleanComedy-6DCA/README.md", "version": "1.0.0", "distribution": [{"@type": "cr:FileObject", "@id": "CleanComedy", "contentUrl": "https://anonymous.4open.science/r/CleanComedy-6DCA/cc_data.zip", "encodingFormat": "application/zip", "sha256": "57731860735be3b7ea980f6b4e53332ff7e8b600418d935d573f6eb24a7228a6"}, {"@type": "cr:FileObject", "@id": "clean_comedy_en.csv", "contentUrl": "https://anonymous.4open.science/r/CleanComedy-6DCA/english/clean_comedy_en.csv", "containedIn": {"@id": "CleanComedy"}, "encodingFormat": "text/csv"}, {"@type": "cr:FileObject", "@id": "clean_comedy_ru.csv", "contentUrl": "https://anonymous.4open.science/r/CleanComedy-6DCA/russian/clean_comedy_ru.csv", "containedIn": {"@id": "CleanComedy"}, "encodingFormat": "text/csv"}, {"@type": "cr:FileObject", "@id": "clean_comedy_gold_en.csv", "contentUrl": "https://anonymous.4open.science/r/CleanComedy-6DCA/english/clean_comedy_gold_en.csv", "containedIn": {"@id": "CleanComedy"}, "encodingFormat": "text/csv"}, {"@type": "cr:FileObject", "@id": "clean_comedy_gold_ru.csv", "contentUrl": "https://anonymous.4open.science/r/CleanComedy-6DCA/russian/clean_comedy_gold_ru.csv", "containedIn": {"@id": "CleanComedy"}, "encodingFormat": "text/csv"}], "recordSet": [{"@type": "cr:RecordSet", "@id": "clean_comedy_en", "field": [{"@type": "cr:Field", "@id": "clean_comedy_en/full_joke", "name": "full_joke", "dataType": "sc:Text", "source": {"fileSet": {"@id": "clean_comedy_en.csv"}, "extract": {"column": "full_joke"}}}, {"@type": "cr:Field", "@id": "clean_comedy_en/set-up", "name": "set-up", "dataType": "sc:Text", "source": {"fileSet": {"@id": "clean_comedy_en.csv"}, "extract": {"column": "set-up"}}}, {"@type": "cr:Field", "@id": "clean_comedy_en/punchline", "name": "punchline", "dataType": "sc:Text", "source": {"fileSet": {"@id": "clean_comedy_en.csv"}, "extract": {"column": "punchline"}}}, {"@type": "cr:Field", "@id": "clean_comedy_en/humour_label", "name": "humour_label", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_en.csv"}, "extract": {"column": "humour_label"}}}]}, {"@type": "cr:RecordSet", "@id": "clean_comedy_ru", "field": [{"@type": "cr:Field", "@id": "clean_comedy_ru/text", "name": "text", "dataType": "sc:Text", "source": {"fileSet": {"@id": "clean_comedy_ru.csv"}, "extract": {"column": "text"}}}, {"@type": "cr:Field", "@id": "clean_comedy_ru/humour_label", "name": "humour_label", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_ru.csv"}, "extract": {"column": "humour_label"}}}]}, {"@type": "cr:RecordSet", "@id": "clean_comedy_gold_en", "field": [{"@type": "cr:Field", "@id": "clean_comedy_gold_en/text", "name": "text", "dataType": "sc:Text", "source": {"fileSet": {"@id": "clean_comedy_gold_en.csv"}, "extract": {"column": "text"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_en/score", "name": "score", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_en.csv"}, "extract": {"column": "score"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_en/score1", "name": "score1", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_en.csv"}, "extract": {"column": "score1"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_en/score2", "name": "score2", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_en.csv"}, "extract": {"column": "score2"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_en/score3", "name": "score3", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_en.csv"}, "extract": {"column": "score3"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_en/score4", "name": "score4", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_en.csv"}, "extract": {"column": "score4"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_en/score5", "name": "score5", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_en.csv"}, "extract": {"column": "score5"}}}]}, {"@type": "cr:RecordSet", "@id": "clean_comedy_gold_ru", "field": [{"@type": "cr:Field", "@id": "clean_comedy_gold_ru/text", "name": "text", "dataType": "sc:Text", "source": {"fileSet": {"@id": "clean_comedy_gold_ru.csv"}, "extract": {"column": "text"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_ru/score", "name": "score", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_ru.csv"}, "extract": {"column": "score"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_ru/score1", "name": "score1", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_ru.csv"}, "extract": {"column": "score1"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_ru/score2", "name": "score2", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_ru.csv"}, "extract": {"column": "score2"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_ru/score3", "name": "score3", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_ru.csv"}, "extract": {"column": "score3"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_ru/score4", "name": "score4", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_ru.csv"}, "extract": {"column": "score4"}}}, {"@type": "cr:Field", "@id": "clean_comedy_gold_ru/score5", "name": "score5", "dataType": "sc:Integer", "source": {"fileSet": {"@id": "clean_comedy_gold_ru.csv"}, "extract": {"column": "score5"}}}]}], "rai:dataCollection": "Clean Comedy English: The initial English data preprocessing involved the removal of examples containing all symbols except Latin characters and punctuation marks. We also noticed that excessively short or long entries have a large amount of noise (for example, repetitions, unfunny utterances), so the next step was to keep examples only between 30 and 150 characters. Duplicating instances were removed with SBERT model. We utilised unbiased toxicity classifier Detoxify, zero-shot classification model DeBERTa, and BERTopic model for removing toxic jokes. \nClean Comedy Russian Duplicating instances were removed with SBERT model. We utilised multilingual toxicity classifier Detoxify, ruBERTConv toxicity classifier, zero-shot classification model DeBERTa, and BERTopic model for removing toxic jokes.", "rai:dataBiases": "There is minimal risk for harm: the data was already public. Consider that English jokes were rated by fluent but not native English speakers. Our commitment to ethical standards aims to minimize the potential harm and to foster a more inclusive and positive digital environment. Despite our efforts, some subtle offensive content might still be present, and the context of jokes can sometimes be misinterpreted, leading to unintended harm.", "@context": {"@language": "en", "@vocab": "https://schema.org/", "citeAs": "cr:citeAs", "column": "cr:column", "conformsTo": "dct:conformsTo", "cr": "http://mlcommons.org/croissant/", "rai": "http://mlcommons.org/croissant/RAI/", "data": {"@id": "cr:data", "@type": "@json"}, "dataType": {"@id": "cr:dataType", "@type": "@vocab"}, "dct": "http://purl.org/dc/terms/", "examples": {"@id": "cr:examples", "@type": "@json"}, "extract": "cr:extract", "field": "cr:field", "fileProperty": "cr:fileProperty", "fileObject": "cr:fileObject", "fileSet": "cr:fileSet", "format": "cr:format", "includes": "cr:includes", "isLiveDataset": "cr:isLiveDataset", "jsonPath": "cr:jsonPath", "key": "cr:key", "md5": "cr:md5", "parentField": "cr:parentField", "path": "cr:path", "recordSet": "cr:recordSet", "references": "cr:references", "regex": "cr:regex", "repeated": "cr:repeated", "replace": "cr:replace", "sc": "https://schema.org/", "separator": "cr:separator", "source": "cr:source", "subField": "cr:subField", "transform": "cr:transform"}, "conformsTo": "http://mlcommons.org/croissant/1.0"}